#include "raylib.h"
#include <stdlib.h>
#include <time.h>

#define SCREEN_WIDTH 800 //화면 너비 800
#define SCREEN_HEIGHT 600 //화면 높이 600

#define MAX_BULLETS 20 //최대 탄환 갯수 20
#define MAX_ENEMIES 25 //최대 적 등장 수 25
#define MAX_ENEMY_BULLETS 30  // 초록 적 3발 동시 발사 고려

//총알 관련 구조체
typedef struct Bullet
{
    Vector2 position;
    bool active;
} Bullet;

//적 관련 구조체
typedef struct Enemy
{
    Vector2 position;
    bool active;
    int hp;         // 체력
    bool isBoss;    // 초록 적 구분
} Enemy;

//적의 총알 관련 구조체
typedef struct EnemyBullet
{
    Vector2 position;
    Vector2 velocity; // 방향 및 속도
    bool active;
} EnemyBullet;

//충돌 체크
bool CheckCollision(Vector2 aPos, Vector2 aSize, Vector2 bPos, Vector2 bSize)
{
    return !(aPos.x > bPos.x + bSize.x ||
        aPos.x + aSize.x < bPos.x ||
        aPos.y > bPos.y + bSize.y ||
        aPos.y + aSize.y < bPos.y);
}

//적 초기화 함수
void SpawnEnemies(Enemy enemies[], int count, Vector2 enemySize)
{
    int i;
    int rows = (count + 4) / 5; // 5마리씩 한 줄
    for (i = 0; i < count; i++)
    {
        enemies[i].position.x = 100 + (i % 5) * 100;
        enemies[i].position.y = 100 + (i / 5) * 60;
        enemies[i].active = true;
        enemies[i].hp = 1;
        enemies[i].isBoss = false;
    }

    if (count > 5)
    {
        // 첫 번째 줄(맨 윗줄)의 적들은 모두 초록색 적
        for (i = 0; i < 5 && i < count; i++)
        {
            enemies[i].isBoss = true;
            enemies[i].hp = 3;
        }
    }

    // 나머지 적 비활성화
    for (i = count; i < MAX_ENEMIES; i++)
    {
        enemies[i].active = false;
    }
}

int main()
{
    InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Mini Galaga");
    SetTargetFPS(60);
    srand(time(NULL));

    Vector2 playerPos;
    playerPos.x = SCREEN_WIDTH / 2.0f - 20;
    playerPos.y = SCREEN_HEIGHT - 40;
    Vector2 playerSize = { 40, 20 };
    float playerSpeed = 5.0f;

    Bullet bullets[MAX_BULLETS];
    Vector2 bulletSize = { 5, 10 };
    int bulletSpeed = 8;
    int i;
    for (i = 0; i < MAX_BULLETS; i++) bullets[i].active = false;

    Enemy enemies[MAX_ENEMIES];
    Vector2 enemySize = { 40, 30 };

    int currentEnemyCount = 5; // 초기 적 5마리
    SpawnEnemies(enemies, currentEnemyCount, enemySize);

    int enemyDirection = 1;  // 1: 오른쪽, -1: 왼쪽
    float enemySpeed = 1.5f;

    EnemyBullet enemyBullets[MAX_ENEMY_BULLETS];
    Vector2 enemyBulletSize = { 5, 10 };
    float enemyBulletSpeed = 4.0f;
    for (i = 0; i < MAX_ENEMY_BULLETS; i++) enemyBullets[i].active = false;

    float enemyShootTimer = 0.0f;
    float enemyShootInterval = 1.5f;

    int lives = 3;
    bool gameOver = false;

    int round = 1;
    int score = 0;

    while (!WindowShouldClose())
    {
        if (!gameOver)
        {
            // 플레이어 이동
            if (IsKeyDown(KEY_LEFT)) playerPos.x -= playerSpeed;
            if (IsKeyDown(KEY_RIGHT)) playerPos.x += playerSpeed;

            // 플레이어 발사
            if (IsKeyPressed(KEY_SPACE)) {
                for (i = 0; i < MAX_BULLETS; i++)
                {
                    if (!bullets[i].active)
                    {
                        bullets[i].position.x = playerPos.x + playerSize.x / 2 - bulletSize.x / 2;
                        bullets[i].position.y = playerPos.y;
                        bullets[i].active = true;
                        break;
                    }
                }
            }

            // 플레이어 탄환 이동 + 적 충돌 처리
            for (i = 0; i < MAX_BULLETS; i++)
            {
                if (bullets[i].active)
                {
                    bullets[i].position.y -= bulletSpeed;
                    if (bullets[i].position.y < 0) bullets[i].active = false;

                    int j;
                    for (j = 0; j < currentEnemyCount; j++)
                    {
                        if (enemies[j].active && CheckCollision(bullets[i].position, bulletSize, enemies[j].position, enemySize))
                        {
                            bullets[i].active = false;
                            enemies[j].hp--;
                            if (enemies[j].hp <= 0)
                            {
                                enemies[j].active = false;
                                score += enemies[j].isBoss ? 300 : 100;  // 보스 적은 300점, 일반 적은 100점
                            }
                            break;
                        }
                    }
                }
            }

            // 적 이동
            float edgeLeft = SCREEN_WIDTH, edgeRight = 0;
            for (i = 0; i < currentEnemyCount; i++)
            {
                if (enemies[i].active)
                {
                    enemies[i].position.x += enemyDirection * enemySpeed;
                    if (enemies[i].position.x < edgeLeft) edgeLeft = enemies[i].position.x;
                    if (enemies[i].position.x + enemySize.x > edgeRight) edgeRight = enemies[i].position.x + enemySize.x;
                }
            }

            if (edgeRight >= SCREEN_WIDTH - 10 || edgeLeft <= 10)
            {
                enemyDirection *= -1;
                for (i = 0; i < currentEnemyCount; i++)
                {
                    if (enemies[i].active)
                    {
                        enemies[i].position.y += 20;
                    }
                }
            }

            // 적 발사 타이머
            enemyShootTimer += GetFrameTime();
            if (enemyShootTimer >= enemyShootInterval)
            {
                enemyShootTimer = 0.0f;

                // 총알 발사할 적 선택
                int shooterIndex = rand() % currentEnemyCount;
                while (!enemies[shooterIndex].active)
                {
                    shooterIndex = rand() % currentEnemyCount;
                }

                Enemy* shooter = &enemies[shooterIndex];

                if (shooter->isBoss)
                {
                    // 초록 적은 3발 동시 발사: 각 총알 좌우로 약간 퍼지게 속도 조절
                    Vector2 basePos;
                    basePos.x = shooter->position.x + enemySize.x / 2 - enemyBulletSize.x / 2;
                    basePos.y = shooter->position.y + enemySize.y;
                    float velX[3] = { -0.5f, 0.0f, 0.5f };
                    int bulletsSpawned = 0;
                    for (i = 0; i < MAX_ENEMY_BULLETS && bulletsSpawned < 3; i++)
                    {
                        if (!enemyBullets[i].active)
                        {
                            enemyBullets[i].position.x = basePos.x;
                            enemyBullets[i].position.y = basePos.y;
                            enemyBullets[i].velocity.x = velX[bulletsSpawned];
                            enemyBullets[i].velocity.y = enemyBulletSpeed;
                            enemyBullets[i].active = true;
                            bulletsSpawned++;
                        }
                    }
                }
                else
                {
                    // 일반 적은 1발만 발사
                    for (i = 0; i < MAX_ENEMY_BULLETS; i++)
                    {
                        if (!enemyBullets[i].active)
                        {
                            enemyBullets[i].position.x = shooter->position.x + enemySize.x / 2 - enemyBulletSize.x / 2;
                            enemyBullets[i].position.y = shooter->position.y + enemySize.y;
                            enemyBullets[i].velocity.x = 0.0f;
                            enemyBullets[i].velocity.y = enemyBulletSpeed;
                            enemyBullets[i].active = true;
                            break;
                        }
                    }
                }
            }

            // 적 탄환 이동 + 충돌 체크 (플레이어 목숨 차감)
            for (i = 0; i < MAX_ENEMY_BULLETS; i++)
            {
                if (enemyBullets[i].active)
                {
                    enemyBullets[i].position.x += enemyBullets[i].velocity.x;
                    enemyBullets[i].position.y += enemyBullets[i].velocity.y;

                    if (enemyBullets[i].position.y > SCREEN_HEIGHT || enemyBullets[i].position.x < 0 || enemyBullets[i].position.x > SCREEN_WIDTH)
                    {
                        enemyBullets[i].active = false;
                    } 

                    if (CheckCollision(enemyBullets[i].position, enemyBulletSize, playerPos, playerSize))
                    {
                        enemyBullets[i].active = false;
                        lives--;
                        if (lives <= 0)
                        {
                            gameOver = true;
                        }
                    }
                }
            }

            // 모든 적이 죽었으면 새 웨이브 출현 (적 수 증가, 라운드 증가)
            bool anyAlive = false;
            for (i = 0; i < currentEnemyCount; i++)
            {
                if (enemies[i].active)
                {
                    anyAlive = true;
                    break;
                }
            }
            if (!anyAlive)
            {
                round++;
                if (currentEnemyCount < MAX_ENEMIES) currentEnemyCount += 5;
                if (currentEnemyCount > MAX_ENEMIES) currentEnemyCount = MAX_ENEMIES;
                SpawnEnemies(enemies, currentEnemyCount, enemySize);
            }
        }

        // 그리기
        BeginDrawing();
        ClearBackground(BLACK);

        DrawText("Mini Galaga", 10, 10, 20, WHITE);

        DrawRectangleV(playerPos, playerSize, BLUE);

        for (i = 0; i < MAX_BULLETS; i++)
        {
            if (bullets[i].active)
            {
                DrawRectangleV(bullets[i].position, bulletSize, YELLOW);
            }
                
        }

        for (i = 0; i < currentEnemyCount; i++)
        {
            if (enemies[i].active)
            {
                Color enemyColor = enemies[i].isBoss ? GREEN : RED;
                DrawRectangleV(enemies[i].position, enemySize, enemyColor);
            }
        }

        for (i = 0; i < MAX_ENEMY_BULLETS; i++)
        {
            if (enemyBullets[i].active)
            {
                DrawRectangleV(enemyBullets[i].position, enemyBulletSize, PURPLE);
            }
                
        }

        // 목숨 표시
        for (i = 0; i < lives; i++)
        {
            DrawCircle(30 + i * 30, SCREEN_HEIGHT - 30, 10, RED);
        }

        // 점수와 라운드 표시
        DrawText(TextFormat("Round: %d", round), SCREEN_WIDTH / 2 - 50, 10, 20, WHITE);
        DrawText(TextFormat("Score: %d", score), SCREEN_WIDTH / 2 - 50, 40, 20, WHITE);

        if (gameOver)
        {
            DrawText("GAME OVER", SCREEN_WIDTH / 2 - 100, SCREEN_HEIGHT / 2 - 20, 40, RED);
            DrawText("Press R to Restart", SCREEN_WIDTH / 2 - 110, SCREEN_HEIGHT / 2 + 30, 20, WHITE);

            if (IsKeyPressed(KEY_R))
            {
                // 초기화
                lives = 3;
                score = 0;
                round = 1;
                currentEnemyCount = 5;
                SpawnEnemies(enemies, currentEnemyCount, enemySize);
                playerPos.x = SCREEN_WIDTH / 2.0f - playerSize.x / 2;
                playerPos.y = SCREEN_HEIGHT - 40;
                gameOver = false;
            }
        }

        EndDrawing();
    }

    CloseWindow();

    return 0;
}
